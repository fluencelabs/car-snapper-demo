aqua Main

import "@fluencelabs/aqua-lib/builtin.aqua"
import "@fluencelabs/aqua-lib/subnet.aqua"

use "deals.aqua"
use "hosts.aqua"
import "services.aqua"


export sealMyData, showSubnet

data Answer:
    status: ?CID
    worker: Worker
    errors: []string

func sealMyData() -> []Answer:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal

    answers: *Answer

    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)

    if subnet.success == false:
        Console.print(["Failed to resolve subnet: ", subnet.error])

    for w <- subnet.workers:
        if w.worker_id != nil:
            on w.worker_id! via w.host_id:
                vault <- Vault.put("the most important data ever")
                result <- SealingService.file_size(vault)
                if result.success:
                    write <- SealingService.write_file_size(result.size)
                    if write.success:
                        cid_bytes <- SealingService.pack(write.path, "car")
                        put_res <- SealingService.upload_ipfs("car")
                        if put_res.success:
                            sealing <- SealingService.seal_data(cid_bytes, put_res.hash, result.size, "http://host.docker.internal:7020/api/v0/import-direct/123")
                            if sealing.success:
                                answers <<- Answer(status = ?[Op.concat_strings("Successfully sent to sealing ", put_res.hash)], worker = w, errors = nil)
                            else:
                                answers <<- Answer(status = nil, worker = w, errors = ["sealing error", sealing.error])
                        else:
                            answers <<- Answer(status = nil, worker = w, errors = ["upload error", put_res.error])
                    else:
                        answers <<- Answer(status = nil, worker = w, errors = ["write size", write.error])
                else:
                    answers <<- Answer(status = nil, worker = w, errors = ["calculate size", result.error])

    <- answers

data WorkerServices:
    host_id: string
    worker_id: ?string
    services: ?[]string
    spells: ?[]string

func showSubnet() -> []WorkerServices:
    deals <- Deals.get()
    dealId = deals.myDeployment!.dealIdOriginal
    on HOST_PEER_ID:
        subnet <- Subnet.resolve(dealId)
    if subnet.success == false:
        Console.print(["Failed to resolve subnet: ", subnet.error])

    services: *WorkerServices
    for w <- subnet.workers:
        if w.worker_id != nil:
            on w.worker_id! via w.host_id:
                -- get list of all services on this worker
                srvs <- Srv.list()

                -- gather spells and services aliases
                spells_aliases: *string
                services_aliases: *string
                for s <- srvs:
                    if s.aliases.length != 0:
                        if s.service_type == "spell":
                            spells_aliases <<- s.aliases[0]
                        if s.service_type == "service":
                            services_aliases <<- s.aliases[0]

                services <<- WorkerServices(host_id=w.host_id, worker_id=w.worker_id, services=?[services_aliases], spells=?[spells_aliases])
        else:
            services <<- WorkerServices(host_id=w.host_id, worker_id=nil, services=nil, spells=nil)

    <- services


-- local
func helloWorld(name: string) -> string:
    <- Op.concat_strings("Hello, ", name)

-- remote
func helloWorldRemote(name: string) -> string:
    on HOST_PEER_ID:
        hello_msg <- helloWorld(name)
        from_msg <- Op.concat_strings(hello_msg, "! From ")
        from_peer_msg <- Op.concat_strings(from_msg, HOST_PEER_ID)
    <- from_peer_msg

-- request response
func getInfo() -> Info, PeerId:
    on HOST_PEER_ID:
        info <- Peer.identify()
    <- info, HOST_PEER_ID

-- iterate through several peers
func getInfos(peers: []PeerId) -> []Info:
    infos: *Info
    for p <- peers:
        on p:
            infos <- Peer.identify()
    <- infos
